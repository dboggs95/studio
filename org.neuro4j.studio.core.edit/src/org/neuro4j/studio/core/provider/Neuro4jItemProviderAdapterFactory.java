/*
 * Copyright (c) 2013-2014, Neuro4j.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.neuro4j.studio.core.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.neuro4j.studio.core.util.Neuro4jAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged
 * fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * 
 * @generated
 */
public class Neuro4jItemProviderAdapterFactory extends Neuro4jAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public Neuro4jItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.DocumentRoot} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected DocumentRootItemProvider documentRootItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.DocumentRoot}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDocumentRootAdapter() {
        if (documentRootItemProvider == null) {
            documentRootItemProvider = new DocumentRootItemProvider(this);
        }

        return documentRootItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.Network} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected NetworkItemProvider networkItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.Network}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createNetworkAdapter() {
        if (networkItemProvider == null) {
            networkItemProvider = new NetworkItemProvider(this);
        }

        return networkItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.ActionNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ActionNodeItemProvider actionNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.ActionNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createActionNodeAdapter() {
        if (actionNodeItemProvider == null) {
            actionNodeItemProvider = new ActionNodeItemProvider(this);
        }

        return actionNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.Node} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected NodeItemProvider nodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.Node}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createNodeAdapter() {
        if (nodeItemProvider == null) {
            nodeItemProvider = new NodeItemProvider(this);
        }

        return nodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.KeyValuePair} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected KeyValuePairItemProvider keyValuePairItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.KeyValuePair}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createKeyValuePairAdapter() {
        if (keyValuePairItemProvider == null) {
            keyValuePairItemProvider = new KeyValuePairItemProvider(this);
        }

        return keyValuePairItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.InOutParameter} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected InOutParameterItemProvider inOutParameterItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.InOutParameter}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createInOutParameterAdapter() {
        if (inOutParameterItemProvider == null) {
            inOutParameterItemProvider = new InOutParameterItemProvider(this);
        }

        return inOutParameterItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.FollowByRelationNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected FollowByRelationNodeItemProvider followByRelationNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.FollowByRelationNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createFollowByRelationNodeAdapter() {
        if (followByRelationNodeItemProvider == null) {
            followByRelationNodeItemProvider = new FollowByRelationNodeItemProvider(this);
        }

        return followByRelationNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.LogicNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected LogicNodeItemProvider logicNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.LogicNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createLogicNodeAdapter() {
        if (logicNodeItemProvider == null) {
            logicNodeItemProvider = new LogicNodeItemProvider(this);
        }

        return logicNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.OperatorOutput} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected OperatorOutputItemProvider operatorOutputItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.OperatorOutput}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createOperatorOutputAdapter() {
        if (operatorOutputItemProvider == null) {
            operatorOutputItemProvider = new OperatorOutputItemProvider(this);
        }

        return operatorOutputItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.OperatorInput} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected OperatorInputItemProvider operatorInputItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.OperatorInput}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createOperatorInputAdapter() {
        if (operatorInputItemProvider == null) {
            operatorInputItemProvider = new OperatorInputItemProvider(this);
        }

        return operatorInputItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.ViewNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ViewNodeItemProvider viewNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.ViewNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createViewNodeAdapter() {
        if (viewNodeItemProvider == null) {
            viewNodeItemProvider = new ViewNodeItemProvider(this);
        }

        return viewNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.NoteNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected NoteNodeItemProvider noteNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.NoteNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createNoteNodeAdapter() {
        if (noteNodeItemProvider == null) {
            noteNodeItemProvider = new NoteNodeItemProvider(this);
        }

        return noteNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.StandardNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected StandardNodeItemProvider standardNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.StandardNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createStandardNodeAdapter() {
        if (standardNodeItemProvider == null) {
            standardNodeItemProvider = new StandardNodeItemProvider(this);
        }

        return standardNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.JoinNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected JoinNodeItemProvider joinNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.JoinNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createJoinNodeAdapter() {
        if (joinNodeItemProvider == null) {
            joinNodeItemProvider = new JoinNodeItemProvider(this);
        }

        return joinNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.DecisionNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected DecisionNodeItemProvider decisionNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.DecisionNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createDecisionNodeAdapter() {
        if (decisionNodeItemProvider == null) {
            decisionNodeItemProvider = new DecisionNodeItemProvider(this);
        }

        return decisionNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.LoopNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected LoopNodeItemProvider loopNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.LoopNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createLoopNodeAdapter() {
        if (loopNodeItemProvider == null) {
            loopNodeItemProvider = new LoopNodeItemProvider(this);
        }

        return loopNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.CallNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected CallNodeItemProvider callNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.CallNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createCallNodeAdapter() {
        if (callNodeItemProvider == null) {
            callNodeItemProvider = new CallNodeItemProvider(this);
        }

        return callNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.StartNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected StartNodeItemProvider startNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.StartNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createStartNodeAdapter() {
        if (startNodeItemProvider == null) {
            startNodeItemProvider = new StartNodeItemProvider(this);
        }

        return startNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.EndNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EndNodeItemProvider endNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.EndNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createEndNodeAdapter() {
        if (endNodeItemProvider == null) {
            endNodeItemProvider = new EndNodeItemProvider(this);
        }

        return endNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.neuro4j.studio.core.MapperNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected MapperNodeItemProvider mapperNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.neuro4j.studio.core.MapperNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createMapperNodeAdapter() {
        if (mapperNodeItemProvider == null) {
            mapperNodeItemProvider = new MapperNodeItemProvider(this);
        }

        return mapperNodeItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    public void dispose() {
        if (documentRootItemProvider != null)
            documentRootItemProvider.dispose();
        if (networkItemProvider != null)
            networkItemProvider.dispose();
        if (actionNodeItemProvider != null)
            actionNodeItemProvider.dispose();
        if (joinNodeItemProvider != null)
            joinNodeItemProvider.dispose();
        if (decisionNodeItemProvider != null)
            decisionNodeItemProvider.dispose();
        if (loopNodeItemProvider != null)
            loopNodeItemProvider.dispose();
        if (callNodeItemProvider != null)
            callNodeItemProvider.dispose();
        if (startNodeItemProvider != null)
            startNodeItemProvider.dispose();
        if (endNodeItemProvider != null)
            endNodeItemProvider.dispose();
        if (mapperNodeItemProvider != null)
            mapperNodeItemProvider.dispose();
        if (nodeItemProvider != null)
            nodeItemProvider.dispose();
        if (keyValuePairItemProvider != null)
            keyValuePairItemProvider.dispose();
        if (inOutParameterItemProvider != null)
            inOutParameterItemProvider.dispose();
        if (followByRelationNodeItemProvider != null)
            followByRelationNodeItemProvider.dispose();
        if (logicNodeItemProvider != null)
            logicNodeItemProvider.dispose();
        if (operatorOutputItemProvider != null)
            operatorOutputItemProvider.dispose();
        if (operatorInputItemProvider != null)
            operatorInputItemProvider.dispose();
        if (viewNodeItemProvider != null)
            viewNodeItemProvider.dispose();
        if (noteNodeItemProvider != null)
            noteNodeItemProvider.dispose();
        if (standardNodeItemProvider != null)
            standardNodeItemProvider.dispose();
    }

}
